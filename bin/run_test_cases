#!/usr/bin/env python

from argparse import ArgumentParser
from fnmatch import fnmatch
from os import path, listdir
from score.path.project_structure import ProjectStructure
from score.case.test_case import TestCase

def setup_argument_parser():
    parser = ArgumentParser()
    parser.add_argument("-d", "--directory",
        help="Specify the directory in the test cases exist. DEFAULT: '.'",
        default=".")
    parser.add_argument("-n", "--name",
        help="Specify the name of the test cases folder. DEFAULT: 'tests'",
        default="tests")
    parser.add_argument("-c", "--case",
        help="Specify the name of the individual test case to run.",
        default=None)
    return parser.parse_args()

def __has_correct_project_structure(project_root):
    return (__has_directory(project_root, ProjectStructure.CASES_DIR) &
        __has_directory(project_root, ProjectStructure.OUTPUT_DIR))

def __has_directory(root, directory_name):
    directory_path = path.join(root, directory_name)
    if not (path.isdir(directory_path) and path.exists(directory_path)):
        print "- {dir} directory not present in '{root}'".format(dir=directory_name, root=root)
        return False
    else:
        return True

def __has_correct_project_setup(root, name):
    has_correct_setup = True
    if __has_directory(root, name):
        project_root = path.join(root, name)
        if not __has_correct_project_structure(project_root):
            print "[ERROR] {root} does not have the correct structure".format(root=project_root)
            has_correct_setup = False
        else:
            print "[SUCCESS] Verified project structure of {root}".format(root=project_root)
    else:
        project_root = path.join(root, name)
        print "[ERROR] Test case directory not present at {root}".format(root=project_root)
        has_correct_setup = False
    return has_correct_setup

def main():
    parsed_args = setup_argument_parser()
    if (__has_correct_project_setup(parsed_args.directory, parsed_args.name)):
        project_root = path.join(parsed_args.directory, parsed_args.name)
        cases_directory_path = path.join(project_root, ProjectStructure.CASES_DIR)
        output_directory_path = path.join(project_root, ProjectStructure.OUTPUT_DIR)
        count = 0
        for case_filename in listdir(cases_directory_path):
            if fnmatch(case_filename, "*.yaml"):
                print "- Running test case {case}".format(case=case_filename)
                case_filepath = path.join(cases_directory_path, case_filename)
                test_case = TestCase.from_yaml_file(case_filepath, output_directory_path)
                output_filepath = test_case.evaluate_and_output_results()
                print "- Finished test case {case}. Wrote results at {output}".format(
                    case=case_filename, output=output_filepath)
                count = count + 1
        print "[SUCCESS] Finished running {count} test cases.".format(count=count)

if __name__ == '__main__':
    main()
