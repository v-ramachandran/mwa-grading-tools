#!/usr/bin/env python

from argparse import ArgumentParser
from os import path, makedirs
from shutil import rmtree
from score.path.project_structure import ProjectStructure
import errno

def __setup_argument_parser():
    parser = ArgumentParser()
    parser.add_argument("-p", "--path",
        help="Specify the directory in which to create the skeleton. DEFAULT: '.'",
        default=".")
    parser.add_argument("-o", "--overwrite",
        help="Overwrite any existing test folder with the same source path and name.",
        action="store_true")
    parser.add_argument("-n", "--name",
        help="Specify the name of the test skeleton folder to be created. DEFAULT: '.'",
        default="tests")
    return parser.parse_args()

def __remove_tests_folder(folder_path):
    try:
        rmtree(folder_path)
        print "- Removed current test cases directory at {path}...".format(path=folder_path)
    except OSError as exception:
        if exception.errno == errno.ENOENT:
            print "- No existing directory to overwrite at {path}...".format(path=folder_path)
            pass
        else:
            raise

def __create_tests_folder(folder_path):
    makedirs(path.join(folder_path, ProjectStructure.SOLUTIONS_DIR))
    print "- Created solutions subdirectory..."
    makedirs(path.join(folder_path, ProjectStructure.CASES_DIR))
    print "- Created cases subdirectory..."
    makedirs(path.join(folder_path, ProjectStructure.OUTPUT_DIR))
    print "- Created output subdirectory..."
    print "[SUCCESS] Finished generating test cases skeleton"

def main():
    parsed_args = __setup_argument_parser()
    folder_path = path.join(parsed_args.path, parsed_args.name)

    if parsed_args.overwrite:
        __remove_tests_folder(folder_path)
    __create_tests_folder(folder_path)

if __name__ == '__main__':
    main()
